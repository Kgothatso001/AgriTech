Smart Wearther Intergrated Irrigation System - Drone path calculation setup

class SWIISDrone:
def_init_(self,starting_point):
self.location=starting_point


class FarmLocation:
def_init_(self,land_size, areas):
self.land_size = land_size
self.areas = areas


def generate_swiis_drone_path(self, drone):
path = []
for area in self.areas:
path.append((drone.location, area))
drone.location = area

return path

#Get user input 
print("welcome to the Farm SWIIS-Drone Path Generator!")
print("Please enter farm size ( in meters ):")

while True: 
try:
North = float(input("North: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")



while True: 
try:
South = float(input("South: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")



while True: 
try:
East = float(input("East: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")



while True: 
try:
West = float(input("West: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")

land_size = {'North': North, 'South': South, 'East': East, 'West': West}


print("Please enter the number of areas in the farm:")

while True: 
try:
num_areas = int(input())
break 
expect ValueError:
print("Invalid input. Please enter a whole number.")

areas= []
for i in range (num_areas):
print(f"Enter the coodinates (x,y) for area { i +1}:")
while True:
try:
x = float(input("x:"))
break 
expect ValueError:
print("Invalid input. Please enter a number.")


While True:
try:
y = float(input("y:"))
break 
expect ValueError:
print("Invalid input. Please enter a number.")
areas.append((x,y))

#Create objects of farm and SWIIS-Drone
Farm = FarmLocation(land_size, areas)
drone = SWIISDrone((0, 0))

#Generate the SWIIS-Drone path

path = farm.generate_swiis_drone_path(drone)

print("Drone path:")
for i, point in 
enumerate(path):
print(f"Point {i+1}:{point}")

Weather forecast

import requests

def get_weather(api_key, city, country):
    base_url = "https://api.weatherapi.com/v1/current.json"  # Replace with the actual endpoint of your weather API
    params = {
        'key': api_key,
        'q': f'{city},{country}',
        'lang': 'en'  # Use appropriate language parameter if required
    }

    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        data = response.json()
        city_name = data['location']['name']
        country_name = data['location']['country']
        temp = data['current']['temp_c']  # Assuming temperature in Celsius, change if needed
        weather = data['current']['condition']['text']
        
        print(f"Weather in {city_name}, {country_name}:")
        print(f"Temperature: {temp}Â°C")
        print(f"Weather: {weather}")
    else:
        print(f"Error: Unable to get weather data (Status Code: {response.status_code})")

def main():
    api_key = "3c54c4adf7164faebc8181240240809"  # Your API Key
    city = input("Enter city: ")
    country = input("Enter country code (e.g., US, GB): ")
    get_weather(api_key, city, country)

if __name__ == "__main__":
    main()

    main()
