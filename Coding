Smart Wearther Intergrated Irrigation System - Drone path calculation setup

class SWIISDrone:
def_init_(self,starting_point):
self.location=starting_point


class FarmLocation:
def_init_(self,land_size, areas):
self.land_size = land_size
self.areas = areas


def generate_swiis_drone_path(self, drone):
path = []
for area in self.areas:
path.append((drone.location, area))
drone.location = area

return path

#Get user input 
print("welcome to the Farm SWIIS-Drone Path Generator!")
print("Please enter farm size ( in meters ):")

while True: 
try:
North = float(input("North: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")



while True: 
try:
South = float(input("South: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")



while True: 
try:
East = float(input("East: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")



while True: 
try:
West = float(input("West: "))
break 
expect ValueError:
print("Invalid input. Please enter a number.")

land_size = {'North': North, 'South': South, 'East': East, 'West': West}


print("Please enter the number of areas in the farm:")

while True: 
try:
num_areas = int(input())
break 
expect ValueError:
print("Invalid input. Please enter a whole number.")

areas= []
for i in range (num_areas):
print(f"Enter the coodinates (x,y) for area { i +1}:")
while True:
try:
x = float(input("x:"))
break 
expect ValueError:
print("Invalid input. Please enter a number.")


While True:
try:
y = float(input("y:"))
break 
expect ValueError:
print("Invalid input. Please enter a number.")
areas.append((x,y))

#Create objects of farm and SWIIS-Drone
Farm = FarmLocation(land_size, areas)
drone = SWIISDrone((0, 0))

#Generate the SWIIS-Drone path

path = farm.generate_swiis_drone_path(drone)

print("Drone path:")
for i, point in 
enumerate(path):
print(f"Point {i+1}:{point}")

Weather forecast

import requests

def get_coordinates(api_key, city_name, country_code):
    # Construct the API URL for getting coordinates
    url = f'https://api.openweathermap.org/data/2.5/weather?q={city_name},{country_code}&appid={api_key}'

    # Make the request to the OpenWeatherMap API
    response = requests.get(url)
    
    # Check if the request was successful
    if response.status_code == 200:
        # Parse the JSON data
        weather_data = response.json()
        lat = weather_data['coord']['lat']
        lon = weather_data['coord']['lon']
        return lat, lon
    else:
        # Handle errors
        print(f"Failed to retrieve coordinates. Status code: {response.status_code}")
        if response.status_code == 401:
            print("Error: Unauthorized. Check your API key.")
        return None, None

def get_weather_forecast(api_key, lat, lon):
    # Construct the API URL for getting weather forecast
    url = f'https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&exclude=minutely,hourly,daily&appid={api_key}'
    
    # Make the request to the OpenWeatherMap API
    response = requests.get(url)
    
    # Check if the request was successful
    if response.status_code == 200:
        # Parse the JSON data
        weather_data = response.json()
        
        # Extract relevant data
        current_weather = weather_data['current']
        temperature_kelvin = current_weather['temp']
        temperature_celsius = temperature_kelvin - 273.15  # Convert to Celsius
        weather_description = current_weather['weather'][0]['description']
        pressure = current_weather['pressure']
        humidity = current_weather['humidity']
        wind_speed = current_weather['wind_speed']
        cloud_cover = current_weather['clouds']
        
        # Print the weather information
        print(f"Weather at {lat}, {lon}:")
        print(f"Temperature: {temperature_celsius:.2f}Â°C")
        print(f"Description: {weather_description.capitalize()}")
        print(f"Humidity: {humidity}%")
        print(f"Pressure: {pressure}hPa")
        print(f"Wind Speed: {wind_speed}m/s")
        print(f"Cloud Cover: {cloud_cover}%")
        print('')
    else:
        # Handle errors
        print(f"Failed to retrieve weather data. Status code: {response.status_code}")
        if response.status_code == 401:
            print("Error: Unauthorized. Check your API key.")

def main():
    # API key for OpenWeatherMap
    api_key = 'YOUR_ACTUAL_API_KEY_HERE'  # Replace with your actual API key

    # Get city name and country code from the user
    city_name = input("Enter city name: ")
    country_code = input("Enter country code (e.g., US, GB): ").upper()

    # Get coordinates for the city
    lat, lon = get_coordinates(api_key, city_name, country_code)
    
    if lat is not None and lon is not None:
        # Retrieve weather forecast
        get_weather_forecast(api_key, lat, lon)
    else:
        print("Unable to get weather data. Please check the city name and country code.")

if __name__ == "__main__":
    main()
